
import { ScriptPrompts } from "@/types/script-generator-types";

// Interface para os par√¢metros de entrada do roteiro
export interface ScriptGenerationParams {
  niche: string;
  subniche: string;
  microSubniche: string;
  blocksCount: number;
  charsPerBlock: number;
}

// Interface para o roteiro completo gerado
export interface CompleteScript {
  titulo: string;
  hook: string;
  introducao: string;
  blocos: {
    texto: string;
    mini_cta: string;
  }[];
  conclusao: string;
  stats: {
    caracteres_com_espacos: number;
    caracteres_sem_espacos: number;
    palavras: number;
    duracao_min: number;
  };
}

// Fun√ß√£o para gerar um t√≠tulo usando a f√≥rmula Personagem + A√ß√£o/Gancho + Emo√ß√£o/Curiosidade
const generateTitle = (params: ScriptGenerationParams): string => {
  const personagens = [
    "O Especialista", 
    "A Influenciadora", 
    "O Empreendedor", 
    "A Treinadora", 
    "O Profissional", 
    "A Mentora"
  ];
  
  const acoes = [
    "Revelou", 
    "Descobriu", 
    "Compartilhou", 
    "Ensinou", 
    "Transformou", 
    "Desafiou", 
    "Provou"
  ];
  
  const ganchos = [
    "o Segredo de", 
    "a Verdade Sobre", 
    "a F√≥rmula Para", 
    "o M√©todo Infal√≠vel de", 
    "a Estrat√©gia Definitiva Para"
  ];
  
  const emocoes = [
    "e Voc√™ Vai Se Surpreender", 
    "e os Resultados S√£o Incr√≠veis", 
    "e Todos Ficaram Chocados", 
    "e Isso Mudar√° Sua Vis√£o Para Sempre", 
    "e Voc√™ Precisa Conhecer Agora"
  ];
  
  // Seleciona elementos aleat√≥rios de cada lista
  const personagem = personagens[Math.floor(Math.random() * personagens.length)];
  const acao = acoes[Math.floor(Math.random() * acoes.length)];
  const gancho = ganchos[Math.floor(Math.random() * ganchos.length)];
  const emocao = emocoes[Math.floor(Math.random() * emocoes.length)];
  
  // Combina os componentes para formar o t√≠tulo
  return `${personagem} ${acao} ${gancho} ${params.microSubniche} ${emocao}`;
};

// Fun√ß√£o para gerar um hook inicial
const generateHook = (params: ScriptGenerationParams): string => {
  const hooks = [
    `Voc√™ j√° se perguntou por que tantas pessoas falham ao tentar ${params.microSubniche}?`,
    `O que realmente separa os bem-sucedidos dos fracassados quando falamos de ${params.microSubniche}?`,
    `E se eu te disser que existe um m√©todo revolucion√°rio para ${params.microSubniche} que pouqu√≠ssimas pessoas conhecem?`,
    `Voc√™ est√° cometendo estes erros fatais em ${params.microSubniche} sem nem perceber?`,
    `Por que 95% das pessoas nunca conseguem resultados reais com ${params.microSubniche}?`
  ];
  
  return hooks[Math.floor(Math.random() * hooks.length)];
};

// Fun√ß√£o para gerar a introdu√ß√£o
const generateIntroduction = (params: ScriptGenerationParams): string => {
  return `Ol√°, seja bem-vindo ao canal! Hoje vamos mergulhar em um tema fascinante: ${params.microSubniche}. 
Se voc√™ se interessa por ${params.subniche} e quer levar seus resultados para o pr√≥ximo n√≠vel, este v√≠deo 
foi feito especialmente para voc√™. Vou compartilhar insights que mudaram completamente minha abordagem e 
tenho certeza que v√£o fazer o mesmo por voc√™. Comente abaixo se voc√™ j√° tentou implementar algo relacionado 
a ${params.microSubniche} e como foi sua experi√™ncia... Vamos come√ßar!`;
};

// Fun√ß√£o para gerar um bloco de conte√∫do
const generateBlock = (
  blockNumber: number, 
  totalBlocks: number, 
  params: ScriptGenerationParams
): { texto: string; mini_cta: string } => {
  // Arrays de situa√ß√µes, conflitos e solu√ß√µes baseados no nicho
  const situacoes = [
    `Muitas pessoas come√ßam a trabalhar com ${params.microSubniche} com grandes expectativas`,
    `Frequentemente vemos iniciantes em ${params.microSubniche} cometendo o mesmo erro b√°sico`,
    `A maioria das pessoas aborda ${params.microSubniche} da maneira tradicional`,
    `Ao iniciar a jornada em ${params.microSubniche}, √© comum sentir-se perdido`,
    `Quando falamos de ${params.microSubniche}, o primeiro desafio √© a falta de conhecimento estruturado`
  ];
  
  const conflitos = [
    `mas logo se deparam com obst√°culos que parecem imposs√≠veis de superar`,
    `por√©m acabam frustrados porque n√£o conseguem ver resultados concretos`,
    `contudo, essa abordagem est√° completamente ultrapassada nos dias de hoje`,
    `e essa confus√£o inicial leva a decis√µes que comprometem todo o processo`,
    `e isso faz com que a maioria desista antes mesmo de come√ßar de verdade`
  ];
  
  const solucoes = [
    `A verdadeira solu√ß√£o est√° em mudar completamente sua perspectiva sobre o processo`,
    `O segredo que descobri ap√≥s anos de estudo √© implementar pequenas mudan√ßas consistentes`,
    `O m√©todo que realmente funciona envolve tr√™s etapas fundamentais que vou detalhar agora`,
    `A estrat√©gia que transformou meus resultados foi focar nos fundamentos antes de avan√ßar`,
    `O que realmente faz diferen√ßa √© entender o princ√≠pio central por tr√°s de ${params.microSubniche}`
  ];
  
  const perguntasRetoricas = [
    `Voc√™ j√° parou para pensar como seria sua vida se dominasse esta habilidade?`,
    `O que aconteceria se voc√™ implementasse este conhecimento j√° na pr√≥xima semana?`,
    `Consegue imaginar os resultados que poderia alcan√ßar com esta abordagem?`,
    `Qual seria o impacto na sua vida se voc√™ superasse esta limita√ß√£o hoje mesmo?`,
    `J√° se perguntou por que algumas pessoas conseguem resultados t√£o superiores nesta √°rea?`
  ];
  
  const promessasProximoBloco = [
    `No pr√≥ximo t√≥pico, vou revelar o elemento mais importante que ningu√©m menciona sobre ${params.microSubniche}`,
    `A seguir, vou mostrar exatamente como implementar esta estrat√©gia no seu dia-a-dia`,
    `Continuando, vou compartilhar o erro n√∫mero um que voc√™ deve evitar a todo custo`,
    `No pr√≥ximo bloco, voc√™ vai descobrir como multiplicar seus resultados com um simples ajuste`,
    `Vamos ver agora como adaptar este m√©todo para qualquer n√≠vel de experi√™ncia`
  ];
  
  // Mini CTAs para engajamento
  const miniCTAs = [
    "Se voc√™ j√° viveu algo parecido, deixe um üëç nos coment√°rios!",
    "Concorda com este ponto? Escreva 'SIM' nos coment√°rios abaixo!",
    "Se este conte√∫do est√° te ajudando, n√£o esque√ßa de deixar um like!",
    "Compartilhe sua experi√™ncia nos coment√°rios - leio todos!",
    "Ative o sininho para n√£o perder nossas pr√≥ximas dicas exclusivas!"
  ];
  
  // Selecionar elementos aleat√≥rios
  const situacao = situacoes[Math.floor(Math.random() * situacoes.length)];
  const conflito = conflitos[Math.floor(Math.random() * conflitos.length)];
  const solucao = solucoes[Math.floor(Math.random() * solucoes.length)];
  const pergunta = perguntasRetoricas[Math.floor(Math.random() * perguntasRetoricas.length)];
  
  // A √∫ltima promessa √© diferente para o √∫ltimo bloco
  let promessa = "";
  if (blockNumber < totalBlocks) {
    promessa = promessasProximoBloco[Math.floor(Math.random() * promessasProximoBloco.length)];
  } else {
    promessa = "Agora vamos concluir com as ideias mais importantes que voc√™ deve levar deste v√≠deo.";
  }
  
  const miniCTA = miniCTAs[Math.floor(Math.random() * miniCTAs.length)];
  
  // Criar texto com tamanho aproximado ao solicitado
  const baseText = `${situacao}. ${conflito}. ${solucao}. ${pergunta} ${promessa}`;
  
  // Ajustar o tamanho do texto para aproximar-se do par√¢metro charsPerBlock
  let texto = baseText;
  while (texto.length < params.charsPerBlock * 0.8) {
    texto = texto + " " + solucoes[Math.floor(Math.random() * solucoes.length)];
  }
  
  // Limitar o tamanho m√°ximo
  if (texto.length > params.charsPerBlock * 1.2) {
    texto = texto.substring(0, params.charsPerBlock);
  }
  
  return { texto, mini_cta: miniCTA };
};

// Fun√ß√£o para gerar a conclus√£o
const generateConclusion = (params: ScriptGenerationParams): string => {
  return `Chegamos ao final deste v√≠deo sobre ${params.microSubniche}. Espero que estas 
informa√ß√µes tenham sido valiosas e que voc√™ possa aplic√°-las imediatamente para transformar 
seus resultados em ${params.subniche}. Lembre-se que a consist√™ncia √© a chave para o sucesso 
nesta √°rea. Se voc√™ gostou deste conte√∫do, n√£o esque√ßa de deixar seu like, se inscrever no 
canal e ativar o sininho para ser notificado sempre que publicarmos novos v√≠deos sobre 
${params.niche}. Al√©m disso, compartilhe nos coment√°rios qual foi seu maior aprendizado 
e como pretende aplic√°-lo. Estou sempre aqui para responder suas d√∫vidas e ajudar em sua 
jornada. At√© o pr√≥ximo v√≠deo!`;
};

// Fun√ß√£o para calcular estat√≠sticas do texto
const calculateStats = (script: CompleteScript): CompleteScript["stats"] => {
  // Combinar todos os textos do roteiro
  let fullText = script.titulo + " " + script.hook + " " + script.introducao;
  
  script.blocos.forEach(bloco => {
    fullText += " " + bloco.texto + " " + bloco.mini_cta;
  });
  
  fullText += " " + script.conclusao;
  
  // Calcular estat√≠sticas
  const caracteresComEspacos = fullText.length;
  const caracteresSemEspacos = fullText.replace(/\s/g, "").length;
  const palavras = fullText.split(/\s+/).filter(word => word.length > 0).length;
  
  // Estimar dura√ß√£o (aproximadamente 150 palavras por minuto)
  const duracaoMin = Math.ceil(palavras / 150);
  
  return {
    caracteres_com_espacos: caracteresComEspacos,
    caracteres_sem_espacos: caracteresSemEspacos,
    palavras: palavras,
    duracao_min: duracaoMin
  };
};

/**
 * Gera um roteiro completo com base nos par√¢metros fornecidos
 * @param params Par√¢metros para gera√ß√£o do roteiro
 * @returns Roteiro completo estruturado
 */
export const generateCompleteScript = (params: ScriptGenerationParams): CompleteScript => {
  // Gerar t√≠tulo
  const titulo = generateTitle(params);
  
  // Gerar hook
  const hook = generateHook(params);
  
  // Gerar introdu√ß√£o
  const introducao = generateIntroduction(params);
  
  // Gerar blocos
  const blocos = [];
  for (let i = 0; i < params.blocksCount; i++) {
    blocos.push(generateBlock(i + 1, params.blocksCount, params));
  }
  
  // Gerar conclus√£o
  const conclusao = generateConclusion(params);
  
  // Criar o roteiro completo
  const script: CompleteScript = {
    titulo,
    hook,
    introducao,
    blocos,
    conclusao,
    stats: {
      caracteres_com_espacos: 0,
      caracteres_sem_espacos: 0,
      palavras: 0,
      duracao_min: 0
    }
  };
  
  // Calcular e adicionar estat√≠sticas
  script.stats = calculateStats(script);
  
  return script;
};
